.key sys,dest/k,ancname/k,68000/s,link/s,tidy/s,ancilla/s,opt/k,ws/k,cc/k,sl/s,sc/s,all/s,comp/k,b1/k,b2/k
.def sys  m68k
.def ws   23500
.def ws   21500
.def dest t:
.def cc   new
.def opt  -wa
.def comp bcp
.def b1  g1:bcp.
.def b2  bcp.
.def ancname NEWESTMAILSERVER

IF EQ <link$nolink> link; SKIP link
IF EQ <tidy$notidy> tidy; SKIP tidy
IF EQ <ancilla$anc> ancilla; SKIP ancilla

. <comp>  <b2>util     mobj:util      opt=ws<ws>/sl/<sc>cc:sc:cc:new:cc:<cc>:<opt>
. <comp>  <b2>ummd     mobj:ummd      opt=ws<ws><sl><sc>cc:sc:cc:new:cc:<cc>:<opt>
. <comp>  <b2>server   mobj:server    opt=ws<ws><sl><sc>cc:sc:cc:new:cc:<cc>:<opt>
. <comp>  <b2>fs       mobj:fs        opt=ws<ws><sl><sc>cc:sc:cc:new:cc:<cc>:<opt>
. <comp>  <b2>send     mobj:send      opt=ws<ws>/sl/<sc>cc:sc:cc:new:cc:<cc>:<opt>
. **<comp>  <b2>send     mobj:csend     opt=ws<ws>/sl/<sc>cc:sc:cc:new:cc:<cc>:<opt>:cc:command:
. <comp>  <b2>main     mobj:main      opt=ws<ws>/sl/<sc>cc:sc:cc:new:cc:<cc>:<opt>
. **<comp>  <b2>main     mobj:cmain     opt=ws<ws>/sl/<sc>cc:sc:cc:new:cc:<cc>:<opt>:cc:command:
. <comp>  <b2>report   mobj:report    opt=ws<ws>/sl/<sc>cc:sc:cc:new:cc:<cc>:<opt>
. <comp>  <b2>msinit   mobj:msinit    opt=ws<ws>/sl/<sc>cc:sc:cc:new:cc:<cc>:<opt>
. <comp>  <b2>bsppair  mobj:bsppair   opt=ws<ws><sl><sc>cc:sc:cc:new:cc:<cc>:<opt>
. <comp>  <b2>mail     mobj:mail      opt=ws<ws><sl><sc>cc:sc:cc:new:cc:<cc>:<opt>
. <comp>  <b2>com      mobj:com       opt=ws<ws><sl><sc>cc:sc:cc:new:cc:<cc>:<opt>
. <comp>  <b2>command  mobj:command   opt=ws<ws>/sl/<sc>cc:sc:cc:new:cc:<cc>:<opt>
. <comp>  <b2>fsinput  mobj:fsinput   opt=ws<ws>/sl/<sc>cc:sc:cc:new:cc:<cc>:<opt>
. <comp>  <b2>groups   mobj:groups    opt=ws<ws><sl><sc>cc:sc:cc:new:cc:<cc>:<opt>
. <comp>  <b2>rdform   mobj:rdform    opt=ws<ws><sl><sc>cc:sc:cc:new:cc:<cc>:<opt>
. <comp>  <b2>readlin  mobj:readlin   opt=ws<ws><sl><sc>cc:sc:cc:new:cc:<cc>:<opt>
. <comp>  <b2>logon    mobj:logon     opt=ws<ws><sl><sc>cc:sc:cc:new:cc:<cc>:<opt>
. ****<comp>  <b2>trace    mobj:trace     opt=ws<ws><sl><sc>cc:sc:cc:new:cc:<cc>:<opt>
. <comp>  <b2>vt       mobj:vt        opt=ws<ws><sl><sc>cc:sc:cc:new:cc:<cc>:<opt>
. IF mctype=68000;<comp> <b2>rmail mobj:rmail opt=ws30000sl/<sc>cc:sc:cc:new:cc:<cc>:<opt>
. <comp>  <b2>rmessage mobj:rmessage  opt=ws<ws>/sl/<sc>cc:sc:cc:new:cc:<cc>:<opt>
. <comp>  <b2>rsend    <dest>rsend    opt=ws<ws>/sl/<sc>cc:sc:cc:new:cc:<cc>:<opt>
FAILAT 30
IF mctype = 68000; assign obj: :pb.mobj; IF NOT FAIL; echo "OBJ: assignment made"
FAILAT 10
. copy mobj:rmail    <dest>rmail
. copy mobj:rmessage <dest>rmessage

. link together the MAIL program
. **obj:link com mobj: CMAIN CSEND to <dest>mail
. Now make the dynamic system
. syslink Mobj:system Mobj:newmail-system
. Will fail if it already exists .....
:68000sys.ancilla mobj:newmail-system name=<ancname> <sys> create
. Now move NEWESTMAILSERVER somewhere ...
delete mobj:newmail-system

QUIT 0

LAB tidy
. Clean up
FAILAT 30
IF mctype=LSI4; protect mobj:n.sys-demon RW; protect mobj:sys-demon RW
                protect mobj:n.system    RW; protect mobj:system    RW
ECHO "Please update make"
QUIT 10
scratch dir=mobj:n
IF EQ selective <all$selective>; SKIP safe
scratch dir=mobj:
QUIT 0

LAB safe
DELETE mobj:n.trmail mobj:n.tcom mobj:n.trsend mobj:n.trmessage
DELETE mobj:mail-system mobj:newmail-system mobj:mail-demon mobj:newmail-demon


